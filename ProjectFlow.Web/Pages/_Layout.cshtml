@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@namespace ProjectFlow.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject IHostEnvironment HostEnvironment

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    @await Html.PartialAsync("_Favicons")
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Raleway:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="css/site.css" rel="stylesheet" />
    <link href="ProjectFlow.Web.styles.css" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    @if (HostEnvironment.IsDevelopment())
    {
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
        <meta http-equiv="Pragma" content="no-cache" />
        <meta http-equiv="Expires" content="0" />
    }

    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    
    <script>
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
            const readableStream = await contentStreamReference.stream();
            const response = new Response(readableStream);          
            const blob = await response.blob();            
            const url = URL.createObjectURL(blob);            
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName || 'download.csv';
            anchorElement.click();            
            URL.revokeObjectURL(url);
        };
    </script>
    
    @if (HostEnvironment.IsDevelopment())
    {
        <script src="app.js?v=@DateTime.Now.Ticks"></script>
    }
    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    </body>
</html>
